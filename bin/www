#!/usr/bin/env node

/**
 * Project:   Vietluck
 * Author:    Tinasoft.vn
 * @version:  v3.0.1
 * Create:    5/2019
 * Modified:  9/2019
 *
 */

const app = require('../app');
const debug = require('debug')('debug:server');
const http = require('http');
const config = require('../config/config');
require('colors');
require("log");

/**
 * Get port from environment and store in Express.
 */

//var port = normalizePort(process.env.PORT || '3000');
let port = config.network.port;
app.set('port', port);

/**
 * Create HTTP server.
 */
let server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    let port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    let bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            log.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            log.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    let addr = server.address();
    let bind = typeof addr === 'string'
        ? 'pipe: ' + addr
        : 'port: ' + addr.port;
    let hostname = "http://" + config.network.hostname;
    log.info('Khởi động Server lúc: ' + Date().yellow);
    log.info('HTTP server: ' + hostname + ':' + addr.port);
}

/**
 * */
log.info(`
 _     ____________ 
| |    | ___ \\ ___ \\
| |    | |_/ / |_/ /
| |    |  __/|    / 
| |____| |   | |\\ \\ 
\\_____/\\_|   \\_| \\_|
`.yellow);
